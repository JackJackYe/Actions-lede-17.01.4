name: Build LEDE tl-wr841-v8-cn

on:
  repository_dispatch:

env:
  TARGET_DEVICE: tl-wr841-v8-cn
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff -a
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler coreutils
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 https://github.com/HiGarfield/lede-17.01.4-Mod.git -b master lede-17.01.4-Mod
          ln -sf /workdir/lede-17.01.4-Mod $GITHUB_WORKSPACE/lede-17.01.4-Mod

          cd $GITHUB_WORKSPACE/lede-17.01.4-Mod
          LEDE_VERSION="$(cat version)"
          echo "LEDE_VERSION=${LEDE_VERSION}" >>$GITHUB_ENV
          LEDE_OUTPUT_NAME="lede-${LEDE_VERSION}-${TARGET_DEVICE}"
          echo "LEDE_OUTPUT_NAME=${LEDE_OUTPUT_NAME}" >>$GITHUB_ENV
          echo "FIRMWARE=$GITHUB_WORKSPACE/out" >> $GITHUB_ENV

      - name: Load custom configuration
        run: |
          cd lede-17.01.4-Mod
          rm -f package/firmware/wireless-regdb/patches/*limit-tx-power.patch   
          ./clean_all.sh
          cp -f "conf/.config.$TARGET_DEVICE" .config    
          make defconfig V=s

      - name: Download package
        id: package
        run: |
          cd lede-17.01.4-Mod
          make download -j8 || make download -j1 V=s
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        run: |
          cd lede-17.01.4-Mod
          echo -e "$(($(nproc) + 1)) thread compile"
          make -j$(($(nproc) + 1)) || make -j1 V=s
          rm -rf ${FIRMWARE}
          mkdir -p ${FIRMWARE}
          cp -u -f bin/targets/*/*/${LEDE_OUTPUT_NAME}-*-sysupgrade.bin ${FIRMWARE}/
          cd ${FIRMWARE}/
          for f in *.bin; do mv "$f" "$(echo "$f" | sed -e 's/-squashfs//g' -e 's/-sysupgrade//g')"; done
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.LEDE_OUTPUT_NAME }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to cowtransfer
        id: cowtransfer
        if: steps.compile.outputs.status == 'success'
        continue-on-error: true
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
          echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: steps.compile.outputs.status == 'success'
        continue-on-error: true
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

      - name: Upload firmware to anonymousfiles
        id: anonymousfiles
        if: steps.compile.outputs.status == 'success'
        continue-on-error: true
        run: |
          upfile="${FIRMWARE}/${LEDE_OUTPUT_NAME}.bin"
          for i in $(seq 1 5); do downurl=$(curl -F file=@${upfile} -F expires=6m https://api.anonymousfiles.io/ 2>/dev/null | tee | tr '\"' '\n' | grep "https"); [ -n ${downurl} ] && break; done
          echo "::warning file=anonymousfiles.io::Download Link: ${downurl}"
          echo "::set-output name=url::${downurl}"

      - name: Generate release tag
        id: tag
        run: |
          echo "::set-output name=release_tag::${LEDE_OUTPUT_NAME}"
          cd $GITHUB_WORKSPACE/lede-17.01.4-Mod
          work_dir="$PWD"
          touch "$work_dir/release.txt"
          echo "ðŸ”— [å¥¶ç‰›å¿«ä¼ ä¸‹è½½ï¼ˆ1å¤©å†…æœ‰æ•ˆï¼‰](${{ steps.cowtransfer.outputs.url }})" >> "$work_dir/release.txt"
          echo "ðŸ”— [WeTransferä¸‹è½½ï¼ˆ7å¤©å†…æœ‰æ•ˆï¼‰](${{ steps.wetransfer.outputs.url }})" >> "$work_dir/release.txt"
          echo "ðŸ”— [AnonymousFilesä¸‹è½½ï¼ˆ6ä¸ªæœˆå†…æœ‰æ•ˆï¼‰](${{ steps.anonymousfiles.outputs.url }})" >> "$work_dir/release.txt"
          cd "${FIRMWARE}"
          echo "" >> "$work_dir/release.txt"
          echo "æ–‡ä»¶MD5æ ¡éªŒï¼š" >> "$work_dir/release.txt"
          md5sum *.bin | awk '{print $2,$1}' >> "$work_dir/release.txt"
          echo "" >> "$work_dir/release.txt"
          echo "è‹¥ä»¥ä¸Šé“¾æŽ¥è¿‡æœŸå¤±æ•ˆï¼Œè¯·åœ¨ä»¥ä¸‹Assetsä¸­ä¸‹è½½æ–‡ä»¶ã€‚" >> "$work_dir/release.txt"
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: HiGarfield/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: lede-17.01.4-Mod/release.txt
          files: ${{ env.FIRMWARE }}/*
